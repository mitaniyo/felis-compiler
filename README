2016 年度 CPU 実験　B 班コンパイラ
MinCaml コンパイラの改造

sfiles/ 以下のファイルが課題の実行に必要なプログラムです。

仕様
ファイルをまたいで用いたい関数のラベルは min_caml ではじめる
外部変数定義ファイルは存在すれば一つでなければならない (外部関数の定義には複数ファイルを用いて良い)

make 方法
make native-code

コンパイル方法
./min-caml.opt file

外部変数がある場合
./min-caml.opt -extvar 1 file
エントリポイントの直後に外部変数生成コードへのジャンプを挿入する

ライブラリ関数定義ファイルのコンパイル方法
./min-caml.opt -lib 1 file
不要関数削除を無効にしてコンパイルする
cd lib
g++ -o exporter exporter.cpp
./exporter < file.s > lib.s
関数に min_caml_(name) のラベルを付ける

外部変数定義ファイルの生成方法
後述の文法に従って手動で必要な変数を記述する
cd globals_compiler
g++ -o emit emit.cpp
./emit < globals.in > globals.s

変数の記述の文法
obj ::= t str
t ::= "0" | "1" | "2"
str ::= (文字列)
  t = 0 のとき、obj は整数を表し、str はその表現
  t = 1 のとき、obj は浮動小数点数を表し、str はその表現
  t = 2 のとき、obj はすでに定義された変数を表し、str はその変数名 (定義済みの変数しか参照できないことに注意)
  課題プログラムの globals.ml の上記だけでは処理できない部分を処理するため t = 4 も実装している
vec_var ::= "vec" len obj flg
  len は長さを表す整数
  obj は要素の初期値
  flg はこの変数をプログラム本体からアクセスできるようにする場合 "1" そうでない場合 "0"
tuple_var ::= "tuple" len obj_1 obj_2 ... obj_len flg
  len は長さを表す整数
  obj_1, ..., obj_len は各要素
  flg は vec_var の場合と同様
var ::= vec_var | tuple_var

として、ファイルに var を並べて記述する


An educational compiler for a minimal subset of OCaml, written in
~2000 lines of OCaml.  For details, see:

http://esumii.github.io/min-caml/ (Japanese Web page)
http://esumii.github.io/min-caml/jpaper.pdf (Japanese academic paper)
http://esumii.github.io/min-caml/index-e.html (English Web page)
http://esumii.github.io/min-caml/paper.pdf (English academic paper)

1. Install OCaml (http://caml.inria.fr/) if you haven't

2. Download (and expand) MinCaml, e.g.
   git clone https://github.com/esumii/min-caml.git

3. cd min-caml/

4. Execute ./to_x86 for x86
   (or ./to_sparc for SPARC, ./to_ppc for PowerPC)

5. make

6. If you like, try the ray tracer

     cd min-rt/ ; make

   though it takes time because of OCaml bytecode (for testing by
   comparison), not MinCaml

[FAQ 1] Is there an x86_64 version?

[A] There is, but it is left as an exercise for students and _not_
included in this distribution.

[FAQ 2] Is there a version that emits C code?

[A] See above.

[Updates on October 9, 2013]

- Moved from SourceForge https://sourceforge.net/p/min-caml/code/ to
  GitHub https://github.com/esumii/min-caml

- Merged the Mac OS patch by shinh
  https://twitter.com/shinh/status/322043108021907458

[Update on July 24, 2012]

- 32-bit x86 (with SSE2, that is, Pentium IV or later) is now
  supported (on Linux and Cygwin); execute ./to_x86 before make.

[Updates on September 17, 2008]

- PowerPC is now supported (in addition to SPARC), thanks to
  Ms. Masuko and Prof. Asai in Ochanomizu University.  You _must_
  execute either ./to_ppc or ./to_sparc _before_ make.

- The register allocator now uses a simpler algorithm.  It omits the
  backtracking (ToSpill and NoSpill) in previous versions.
